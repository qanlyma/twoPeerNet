package main

import (
	"fmt"
	"math"
	"strings"
	"time"
)

var graph, invgraph [][]int32

func main() {
	graph = [][]int32{{77}, {78, 84}, {21, 167}, {}, {84}, {52, 113}, {27, 166}, {47, 65, 91}, {}, {37, 146, 177}, {}, {254}, {76}, {79, 128, 210}, {79, 192, 213, 239}, {44, 128, 151, 200, 209, 250, 251}, {25, 30, 32}, {}, {181, 253}, {35, 55, 92, 118}, {}, {}, {191}, {160, 191, 252}, {105, 168, 178, 216}, {16, 95, 145}, {61, 119}, {6, 67, 71, 166}, {27, 118}, {198}, {16, 32}, {91, 240}, {75}, {112, 137, 172}, {41, 197}, {13, 38}, {194, 223, 244}, {184, 198}, {13, 35}, {154}, {54, 152, 233}, {34, 117, 197}, {}, {77, 136, 243}, {67}, {87, 214, 215, 246}, {116, 155, 235}, {7, 122}, {104, 183}, {118, 178, 237}, {114, 175}, {}, {67, 231}, {4, 12, 144, 223}, {31, 218, 242}, {88, 227}, {136}, {109, 133}, {22}, {203}, {148}, {150, 170}, {137}, {}, {102, 124}, {7, 91, 243}, {2, 81, 99, 106}, {27, 52, 71}, {170}, {147}, {181}, {64, 163}, {}, {62, 111, 124, 180, 211}, {122, 151, 189, 193, 250}, {90, 134}, {5, 231}, {43, 118}, {83, 148, 171, 174, 210, 225}, {14, 213}, {74, 78, 167, 192}, {62, 66, 99}, {40, 232}, {78, 193}, {4, 174}, {}, {160, 203}, {45, 146, 215, 246}, {55, 125}, {109, 141, 213}, {75}, {7, 65}, {19, 39, 55, 118, 224}, {8, 173}, {221}, {25, 145, 155, 183}, {142}, {105}, {49, 112, 164, 172}, {30, 81, 137}, {88, 103, 175}, {}, {64, 124, 169}, {192, 211}, {194}, {24, 97, 168, 216}, {2, 66, 81}, {124, 149}, {51}, {57}, {189, 203, 223, 235}, {23, 113, 169, 211, 226}, {33, 80, 91, 172}, {5, 52, 227, 238}, {}, {34, 144, 182, 184}, {46, 235}, {41, 94, 179}, {28, 77}, {26}, {}, {122, 214}, {74, 151, 193, 250}, {139}, {107}, {69, 164, 242}, {244}, {}, {13, 197}, {228, 236}, {23, 107, 198}, {173, 180}, {}, {57}, {217}, {20, 161, 212, 243}, {56, 59, 101, 238}, {62, 81, 99}, {98}, {102, 212}, {}, {5, 89, 185}, {96}, {6, 165}, {4, 12, 53, 184, 230}, {25, 95}, {9, 177, 218}, {69}, {189, 209, 239}, {107, 116}, {162, 241}, {19, 227, 237}, {195}, {92, 103}, {}, {46}, {}, {35}, {}, {236, 253}, {86}, {234}, {132, 150, 241}, {71}, {125, 247}, {252}, {6, 27, 43, 48, 150, 157}, {112, 208}, {47, 51}, {111, 205}, {61, 77}, {78, 148, 174, 196, 210, 225}, {40, 98}, {131}, {78, 148, 171, 210, 225}, {88, 100, 103}, {}, {9, 146}, {49, 118}, {135, 219}, {62, 73, 124, 131}, {18, 202}, {108, 249}, {89, 95, 155}, {34, 115, 182, 233}, {5, 141}, {97, 218}, {30, 179}, {207}, {74, 110, 235}, {225}, {23, 80, 201, 203}, {103, 211}, {106, 191}, {36}, {152}, {}, {34, 41, 128}, {23, 53, 130, 153}, {121}, {20, 220}, {178, 219}, {200, 249}, {86, 110, 223}, {136, 247}, {15, 240}, {116}, {188}, {134, 229}, {}, {78, 148, 171, 174, 225}, {23, 73, 111, 113, 226}, {20, 101, 135, 161}, {14, 79}, {121, 122}, {45, 87, 222, 246}, {215}, {7}, {54, 97, 186, 242}, {178, 179, 201}, {119}, {}, {215}, {110, 203}, {39, 92}, {121}, {23, 111, 113, 211}, {55}, {129, 236, 254, 255}, {99, 208}, {185}, {76}, {28, 218}, {85, 234}, {161}, {110, 189}, {113}, {49}, {59, 101, 113, 136, 227}, {105, 148, 189}, {130, 205}, {52, 150, 162}, {54, 218}, {135}, {36, 126, 223}, {}, {220}, {}, {241, 253}, {}, {46, 135}, {105}, {23, 63, 160, 161}, {18, 159, 236}, {149, 158}, {163, 228, 254}}
	invgraph = [][]int32{{}, {}, {66, 106}, {}, {53, 84, 144}, {76, 113, 141, 185}, {27, 143, 166}, {47, 65, 91, 217}, {93}, {146, 177}, {}, {}, {53, 144}, {35, 38, 128}, {79, 213}, {205}, {25, 30}, {}, {181, 253}, {92, 151}, {135, 200, 212}, {2}, {58}, {111, 130, 191, 198, 211, 226, 252}, {105}, {16, 95, 145}, {119}, {6, 28, 67, 166}, {118, 232}, {}, {16, 99, 187}, {54}, {16, 30}, {112}, {41, 115, 184, 197}, {19, 38, 157}, {194, 244}, {9}, {35}, {92, 224}, {82, 172}, {34, 117, 197}, {}, {77, 166}, {15}, {87, 215}, {116, 155, 250}, {7, 168}, {166}, {98, 178, 237}, {}, {108, 168}, {5, 67, 113, 241}, {144, 198}, {40, 218, 242}, {19, 88, 92, 227}, {136}, {109, 133}, {}, {136, 238}, {}, {26, 170}, {73, 81, 137, 180}, {252}, {71, 102}, {7, 91}, {81, 106}, {27, 44, 52}, {}, {125, 147}, {}, {27, 67, 163}, {}, {180, 211}, {80, 122, 189}, {32, 90}, {12, 231}, {0, 43, 118, 170}, {1, 80, 83, 171, 174, 210}, {13, 14, 213}, {112, 191}, {66, 99, 106, 137}, {}, {78}, {1, 4}, {233}, {160, 203}, {45, 215}, {55, 100, 175}, {141, 183}, {75}, {7, 31, 65, 112}, {19, 153, 224}, {}, {117}, {25, 145, 183}, {142}, {105, 186, 218}, {138, 172}, {66, 81, 137, 229}, {175}, {136, 212, 238}, {64, 139}, {100, 153, 175, 192}, {48}, {24, 97, 239, 251}, {66, 193}, {124, 130, 149}, {182}, {57, 89}, {189, 203, 223, 235}, {73, 169, 211, 226}, {33, 98, 167}, {5, 111, 211, 226, 236, 238}, {50}, {184}, {46, 149, 206}, {41}, {19, 28, 49, 77, 92, 178}, {26, 220}, {}, {199, 214, 225}, {47, 74, 121, 214}, {}, {64, 73, 102, 107, 180}, {88, 164}, {244}, {}, {13, 15, 197}, {228}, {198, 240}, {173, 180}, {162}, {57}, {75, 208}, {179, 212, 243, 250}, {43, 56, 204, 238}, {33, 62, 99}, {}, {123}, {}, {89, 185}, {96}, {}, {53, 115}, {25, 95}, {9, 87, 177}, {69}, {60, 78, 171, 174, 210, 239}, {107, 254}, {61, 162, 166, 241}, {15, 74, 122}, {40, 195}, {198}, {39}, {46, 95, 183}, {}, {166}, {254}, {253}, {23, 86, 252}, {135, 212, 234, 252}, {150, 241}, {71, 255}, {98, 125}, {143}, {6, 27}, {2, 80}, {24, 105}, {102, 111}, {61, 68}, {78, 174, 210}, {33, 98, 112}, {93, 131}, {78, 84, 171, 210}, {50, 100}, {}, {9, 146}, {24, 49, 201, 219}, {117, 187, 219}, {73, 131}, {18, 70}, {115, 184}, {48, 95}, {37, 115, 144}, {141, 230}, {218}, {}, {207}, {74, 110, 148, 235, 239}, {}, {22, 23, 193}, {14, 80, 103}, {74, 83, 122}, {36, 104}, {152}, {171}, {34, 41, 128}, {29, 37, 130}, {}, {15, 202}, {191, 219}, {181}, {59, 86, 110, 191, 223}, {}, {169, 240}, {}, {188}, {167, 229}, {15, 148}, {13, 78, 171, 174}, {73, 103, 111, 192, 226}, {135, 139}, {14, 79, 89}, {45, 121}, {45, 87, 216, 222}, {24, 105}, {134}, {54, 146, 186, 232, 242}, {179, 201}, {200, 246}, {94}, {215}, {36, 53, 110, 203, 244}, {92}, {78, 171, 174, 190, 210}, {111, 211}, {55, 113, 151, 238}, {129, 255}, {208}, {144}, {52, 76}, {82}, {40, 184}, {161, 233}, {46, 110, 116, 189}, {129, 159, 228, 253}, {49, 151}, {113, 136}, {14, 148}, {31, 205}, {150, 162, 248}, {54, 125, 218}, {43, 65, 135}, {36, 126}, {}, {45, 87, 215}, {164, 204}, {}, {182, 202}, {15, 74, 122}, {15}, {23, 165}, {18, 159, 248}, {11, 228, 255}, {228}}

	// strgraph := "[[77] [78 84] [21 167] [] [84] [52 113] [27 166] [47 65 91] [] [37 146 177] [] [254] [76] [79 128 210] [79 192 213 239] [44 128 151 200 209 250 251] [25 30 32] [] [181 253] [35 55 92 118] [] [] [191] [160 191 252] [105 168 178 216] [16 95 145] [61 119] [6 67 71 166] [27 118] [198] [16 32] [91 240] [75] [112 137 172] [41 197] [13 38] [194 223 244] [184 198] [13 35] [154] [54 152 233] [34 117 197] [] [77 136 243] [67] [87 214 215 246] [116 155 235] [7 122] [104 183] [118 178 237] [114 175] [] [67 231] [4 12 144 223] [31 218 242] [88 227] [136] [109 133] [22] [203] [148] [150 170] [137] [] [102 124] [7 91 243] [2 81 99 106] [27 52 71] [170] [147] [181] [64 163] [] [62 111 124 180 211] [122 151 189 193 250] [90 134] [5 231] [43 118] [83 148 171 174 210 225] [14 213] [74 78 167 192] [62 66 99] [40 232] [78 193] [4 174] [] [160 203] [45 146 215 246] [55 125] [109 141 213] [75] [7 65] [19 39 55 118 224] [8 173] [221] [25 145 155 183] [142] [105] [49 112 164 172] [30 81 137] [88 103 175] [] [64 124 169] [192 211] [194] [24 97 168 216] [2 66 81] [124 149] [51] [57] [189 203 223 235] [23 113 169 211 226] [33 80 91 172] [5 52 227 238] [] [34 144 182 184] [46 235] [41 94 179] [28 77] [26] [] [122 214] [74 151 193 250] [139] [107] [69 164 242] [244] [] [13 197] [228 236] [23 107 198] [173 180] [] [57] [217] [20 161 212 243] [56 59 101 238] [62 81 99] [98] [102 212] [] [5 89 185] [96] [6 165] [4 12 53 184 230] [25 95] [9 177 218] [69] [189 209 239] [107 116] [162 241] [19 227 237] [195] [92 103] [] [46] [] [35] [] [236 253] [86] [234] [132 150 241] [71] [125 247] [252] [6 27 43 48 150 157] [112 208] [47 51] [111 205] [61 77] [78 148 174 196 210 225] [40 98] [131] [78 148 171 210 225] [88 100 103] [] [9 146] [49 118] [135 219] [62 73 124 131] [18 202] [108 249] [89 95 155] [34 115 182 233] [5 141] [97 218] [30 179] [207] [74 110 235] [225] [23 80 201 203] [103 211] [106 191] [36] [152] [] [34 41 128] [23 53 130 153] [121] [20 220] [178 219] [200 249] [86 110 223] [136 247] [15 240] [116] [188] [134 229] [] [78 148 171 174 225] [23 73 111 113 226] [20 101 135 161] [14 79] [121 122] [45 87 222 246] [215] [7] [54 97 186 242] [178 179 201] [119] [] [215] [110 203] [39 92] [121] [23 111 113 211] [55] [129 236 254 255] [99 208] [185] [76] [28 218] [85 234] [161] [110 189] [113] [49] [59 101 113 136 227] [105 148 189] [130 205] [52 150 162] [54 218] [135] [36 126 223] [] [220] [] [241 253] [] [46 135] [105] [23 63 160 161] [18 159 236] [149 158] [163 228 254]]"
	// strinvgraph := "[[] [] [66 106] [] [53 84 144] [76 113 141 185] [27 143 166] [47 65 91 217] [93] [146 177] [] [] [53 144] [35 38 128] [79 213] [205] [25 30] [] [181 253] [92 151] [135 200 212] [2] [58] [111 130 191 198 211 226 252] [105] [16 95 145] [119] [6 28 67 166] [118 232] [] [16 99 187] [54] [16 30] [112] [41 115 184 197] [19 38 157] [194 244] [9] [35] [92 224] [82 172] [34 117 197] [] [77 166] [15] [87 215] [116 155 250] [7 168] [166] [98 178 237] [] [108 168] [5 67 113 241] [144 198] [40 218 242] [19 88 92 227] [136] [109 133] [] [136 238] [] [26 170] [73 81 137 180] [252] [71 102] [7 91] [81 106] [27 44 52] [] [125 147] [] [27 67 163] [] [180 211] [80 122 189] [32 90] [12 231] [0 43 118 170] [1 80 83 171 174 210] [13 14 213] [112 191] [66 99 106 137] [] [78] [1 4] [233] [160 203] [45 215] [55 100 175] [141 183] [75] [7 31 65 112] [19 153 224] [] [117] [25 145 183] [142] [105 186 218] [138 172] [66 81 137 229] [175] [136 212 238] [64 139] [100 153 175 192] [48] [24 97 239 251] [66 193] [124 130 149] [182] [57 89] [189 203 223 235] [73 169 211 226] [33 98 167] [5 111 211 226 236 238] [50] [184] [46 149 206] [41] [19 28 49 77 92 178] [26 220] [] [199 214 225] [47 74 121 214] [] [64 73 102 107 180] [88 164] [244] [] [13 15 197] [228] [198 240] [173 180] [162] [57] [75 208] [179 212 243 250] [43 56 204 238] [33 62 99] [] [123] [] [89 185] [96] [] [53 115] [25 95] [9 87 177] [69] [60 78 171 174 210 239] [107 254] [61 162 166 241] [15 74 122] [40 195] [198] [39] [46 95 183] [] [166] [254] [253] [23 86 252] [135 212 234 252] [150 241] [71 255] [98 125] [143] [6 27] [2 80] [24 105] [102 111] [61 68] [78 174 210] [33 98 112] [93 131] [78 84 171 210] [50 100] [] [9 146] [24 49 201 219] [117 187 219] [73 131] [18 70] [115 184] [48 95] [37 115 144] [141 230] [218] [] [207] [74 110 148 235 239] [] [22 23 193] [14 80 103] [74 83 122] [36 104] [152] [171] [34 41 128] [29 37 130] [] [15 202] [191 219] [181] [59 86 110 191 223] [] [169 240] [] [188] [167 229] [15 148] [13 78 171 174] [73 103 111 192 226] [135 139] [14 79 89] [45 121] [45 87 216 222] [24 105] [134] [54 146 186 232 242] [179 201] [200 246] [94] [215] [36 53 110 203 244] [92] [78 171 174 190 210] [111 211] [55 113 151 238] [129 255] [208] [144] [52 76] [82] [40 184] [161 233] [46 110 116 189] [129 159 228 253] [49 151] [113 136] [14 148] [31 205] [150 162 248] [54 125 218] [43 65 135] [36 126] [] [45 87 215] [164 204] [] [182 202] [15 74 122] [15] [23 165] [18 159 248] [11 228 255] [228]]"
	// transfer(strgraph)
	// transfer(strinvgraph)

	tol := len(graph)

	start1 := time.Now()
	res1, _ := ReorderSort(graph, invgraph)
	e1 := time.Since(start1).Nanoseconds() / 1000
	fmt.Println("FabricMan:", res1)

	start2 := time.Now()
	resGen := NewResolver(&graph, &invgraph)
	res2, _ := resGen.GetSchedule()
	e2 := time.Since(start2).Nanoseconds() / 1000
	fmt.Println("Fabric++:", res2)

	fmt.Println("========================result========================")
	fmt.Println("Total Txs:", tol)
	fmt.Println("time of FabricMan:", e1, "lenth of FabricMan:", len(res1))
	fmt.Println("time of Fabric++:", e2, "lenth of Fabric++:", len(res2))
}

func transfer(str string) {
	newstr := strings.Replace(str, "[", "{", -1)
	newstr = strings.Replace(newstr, "]", "}", -1)
	newstr = strings.Replace(newstr, " ", ",", -1)
	fmt.Println("new:", newstr)
}

func ReorderSort(graph, invgraph [][]int32) ([]int32, error) {
	indegree := make(map[int32]int)
	outdegree := make(map[int32]int)
	nodeset := make(map[int32]bool)

	// Calculate in-degrees using invgraph
	for i := 0; i < len(invgraph); i++ {
		for node := range invgraph {
			indegree[int32(node)] = len(invgraph[int32(node)])
			nodeset[int32(node)] = true
		}
	}
	// Calculate out-degrees using graph
	for i := 0; i < len(graph); i++ {
		for node := range graph {
			outdegree[int32(node)] = len(graph[int32(node)])
		}
	}

	var result []int32
	var nodeToSort int32

	start := time.Now()
	for len(nodeset) > 0 {
		// Find the node with min in-dgree
		minIndegree := math.MaxInt32
		for node := range nodeset {
			if indegree[node] < minIndegree {
				minIndegree = indegree[node]
				nodeToSort = node
			} else if indegree[node] == minIndegree && outdegree[node] < outdegree[nodeToSort] {
				nodeToSort = node
			}
		}

		// remove nodes which affet nodeToSort
		for _, nodeToRemove := range invgraph[nodeToSort] {
			if exist := nodeset[nodeToRemove]; !exist {
				continue
			}
			delete(nodeset, nodeToRemove)
			for _, v := range invgraph[nodeToRemove] {
				outdegree[v]--
			}
			for _, v := range graph[nodeToRemove] {
				indegree[v]--
			}
		}
		result = append(result, nodeToSort)
		for _, v := range graph[nodeToSort] {
			indegree[v]--
		}
		delete(nodeset, nodeToSort)
	}
	e := time.Since(start).Nanoseconds() / 1000
	fmt.Println("Algorithm of FabricMan:", e)

	return result, nil
}

type Resolver interface {
	GetSchedule() ([]int32, []bool)
}

type resolver struct {
	graph    *[][]int32 // original graph represented as adjacency list
	invgraph *[][]int32 // inverted graph represented as adjacency list
}

func NewResolver(graph *[][]int32, invgraph *[][]int32) Resolver {
	return &resolver{
		graph:    graph,
		invgraph: invgraph,
	}
}

func (res *resolver) GetSchedule() ([]int32, []bool) {
	// get an instance of dependency resolver
	dagGenerator := NewJohnsonCE(res.graph)

	// run cycle breaker, and retrieve the number of invalidated vertices
	// and the invalid vertices set
	invCount, invSet := dagGenerator.Run()

	nvertices := int32(len(*(res.graph)))

	// track visited vertices
	visited := make([]bool, nvertices)

	// store the schedule
	schedule := make([]int32, 0, nvertices-invCount)

	// track number of processed vertices
	remainingVertices := nvertices - invCount

	// start vertex
	start := int32(0)

	for remainingVertices != 0 {
		addVertex := true
		if visited[start] || invSet[start] {
			start = (start + 1) % nvertices
			continue
		}

		// if there are no incoming edges, start traversal
		// otherwise traverse the inv graph to find the parent
		// which has no incoming edge.
		for _, in := range (*(res.invgraph))[start] {
			if !(visited[in] || invSet[in]) {
				start = in
				addVertex = false
				break
			}
		}
		if addVertex {
			visited[start] = true
			remainingVertices -= 1
			schedule = append(schedule, start)
			for _, n := range (*(res.graph))[start] {
				if !(visited[n] || invSet[n]) {
					start = n
					break
				}
			}
		}
	}

	return schedule, invSet
}
