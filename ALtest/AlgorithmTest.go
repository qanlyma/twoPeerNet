package main

import (
	"fmt"
	"math"
	"strings"
	"time"
)

var graph, invgraph [][]int32

func main() {
	graph = [][]int32{{72, 145}, {}, {}, {}, {17, 102, 127, 152, 253}, {}, {}, {}, {}, {}, {}, {}, {214}, {}, {}, {89, 134, 164, 213, 232}, {}, {4, 102, 127, 152, 253}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {102, 179, 218}, {}, {}, {215}, {}, {68, 131, 220, 242}, {62, 75, 191, 237}, {60, 129, 161, 253}, {77, 135, 162, 196}, {70, 133}, {72}, {139, 245}, {129, 180, 213}, {142, 150}, {135, 160, 215}, {199, 224}, {57, 149, 252}, {79, 85, 90}, {105}, {250}, {47, 129, 161, 253}, {81, 124, 136, 169, 239}, {117, 128, 227}, {55, 80, 230}, {147, 159}, {162, 187, 216}, {68, 143, 150}, {177}, {66, 143, 150}, {171}, {49, 133}, {46, 173}, {0, 145}, {79}, {103}, {152, 180, 201, 216}, {45, 153, 223}, {48, 135, 162, 196}, {91, 93, 195, 208, 240}, {73}, {55, 63, 230}, {159, 219}, {50, 111, 119, 160, 247}, {49, 154, 202, 252}, {249}, {57, 79, 90}, {67, 115, 204}, {}, {64, 124, 127, 251}, {158}, {57, 79, 85}, {15}, {58, 101, 168, 235}, {122, 134}, {}, {}, {181, 225}, {26, 115, 227}, {17, 85, 232}, {}, {121, 176, 187}, {58, 92, 168, 235}, {4, 17, 127, 152, 253}, {179}, {106}, {58}, {107, 136, 155, 176, 191, 229, 241}, {106, 136, 155, 176, 191, 229, 241}, {189}, {82, 167}, {148, 153, 157}, {50, 82, 119, 160, 247}, {236}, {52, 120}, {94, 185, 195, 199, 243}, {26, 97, 227}, {138}, {62, 128, 227}, {131, 146, 174}, {147}, {101, 177}, {100, 176, 187}, {93, 134}, {198}, {64, 88, 127, 251}, {190, 192}, {84}, {64, 88, 124, 251}, {}, {52, 180, 213}, {60, 158}, {118, 146, 174}, {}, {149, 165, 168}, {93, 122}, {48, 77, 162, 196}, {106, 107, 155, 176, 191, 229, 241}, {238}, {90, 200}, {51, 245}, {183, 209}, {132, 156, 166, 189}, {234}, {}, {209, 246}, {}, {212}, {64, 159}, {218, 247}, {133, 165, 168}, {66, 68, 143}, {77, 185}, {75, 180, 201, 216}, {45, 76, 223}, {192, 214, 245}, {106, 107, 136, 176, 191, 229, 241}, {132, 141, 166, 189}, {110, 148, 153}, {60, 130}, {81, 219}, {54, 135, 215}, {54, 174, 233, 242}, {65, 187, 216}, {170, 220}, {250}, {87}, {132, 141, 156, 189}, {82, 109}, {133, 149, 165}, {61, 81, 124, 136, 239}, {255}, {69}, {208}, {141}, {54, 161, 233, 242}, {}, {106, 107, 136, 155, 191, 229, 241}, {101, 120}, {157}, {103}, {52, 129, 213}, {96, 225}, {}, {113, 226}, {186}, {77, 151}, {205}, {100, 121, 176}, {}, {108}, {125, 192}, {106, 107, 136, 155, 176, 229, 241}, {125, 190}, {130}, {66, 109, 114}, {78, 91, 93, 208, 240}, {48, 77, 135, 162}, {}, {123}, {94, 114, 185, 195, 243}, {}, {65}, {49, 83, 154, 252}, {228}, {}, {43}, {210, 248}, {}, {78, 91, 93, 195, 240}, {144, 246}, {226}, {229}, {107, 234}, {52, 129, 180}, {12}, {54, 135, 160}, {75, 152, 180, 201}, {97, 105}, {40, 102, 179}, {211}, {45, 68, 131, 242}, {}, {}, {45, 76, 153}, {55, 199}, {230}, {113, 183}, {62, 117, 128}, {203, 222}, {211}, {55, 63, 80}, {155}, {17, 85, 98}, {54, 161, 174, 242}, {142}, {}, {112}, {46, 62, 75, 191}, {}, {61, 81, 124, 136, 169}, {78, 91, 93, 195, 208}, {188}, {45, 68, 131, 220}, {94, 114, 185, 195, 199}, {140, 184}, {51, 139}, {4, 12, 190, 202}, {148, 218}, {206, 210}, {111}, {164}, {0, 178, 243, 255}, {56, 57, 149}, {4, 17, 102, 127, 152}, {74}, {0, 178, 243, 251}}
	invgraph = [][]int32{{72, 251, 255}, {}, {}, {}, {17, 102, 246, 253}, {}, {}, {}, {}, {}, {}, {}, {214, 246}, {}, {}, {91}, {}, {4, 98, 102, 232, 253}, {}, {}, {}, {}, {}, {}, {}, {}, {97, 115}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {218}, {}, {}, {205}, {}, {76, 153, 220, 223, 242}, {71, 237}, {60}, {77, 135, 196}, {70, 83, 202}, {82, 111}, {139, 245}, {113, 129, 180, 213}, {}, {160, 161, 174, 215, 233}, {63, 80, 224, 230}, {252}, {56, 85, 90, 252}, {92, 101, 105}, {}, {47, 130, 158}, {169, 239}, {46, 117, 227, 237}, {80, 230}, {88, 124, 127, 147}, {162, 201}, {68, 150, 194}, {86}, {45, 66, 150, 220, 242}, {171}, {49}, {}, {0, 50}, {79}, {254}, {46, 152, 216, 237}, {153, 223}, {48, 135, 151, 185, 196}, {195, 208, 240}, {57, 73, 85, 90}, {63, 230}, {61, 159, 169, 239}, {109, 111, 167}, {202}, {126}, {57, 90, 98, 232}, {}, {165}, {124, 127}, {15}, {57, 85, 138}, {78, 195, 208, 240}, {101}, {78, 122, 134, 195, 208, 240}, {114, 199, 243}, {}, {181}, {115, 217}, {232}, {}, {121, 187}, {92, 120, 177}, {4, 17, 40, 218, 253}, {74, 179}, {}, {58, 217}, {104, 107, 136, 155, 176, 191}, {106, 136, 155, 176, 191, 212}, {189}, {167, 194}, {157}, {82, 249}, {236}, {183, 226}, {194, 199, 243}, {86, 97}, {}, {62, 227}, {131}, {82, 111}, {113, 177}, {100, 187}, {93, 134}, {198}, {61, 88, 127, 169, 239}, {190, 192}, {}, {4, 17, 88, 102, 124, 253}, {62, 117, 227}, {47, 52, 60, 180, 213}, {158, 193}, {45, 118, 220, 242}, {141, 156, 166}, {49, 70, 149, 168}, {15, 93, 122}, {48, 54, 77, 160, 196, 215}, {61, 106, 107, 155, 169, 176, 191, 239}, {}, {116}, {51, 245}, {244}, {156, 166, 173}, {53, 234}, {66, 68, 150}, {209}, {0, 72}, {118, 131}, {64, 119}, {110, 157, 247}, {56, 133, 168, 252}, {53, 66, 68}, {185}, {4, 17, 75, 102, 216, 253}, {76, 110, 157, 223}, {83, 202}, {106, 107, 136, 176, 191, 231}, {141, 166}, {110, 178}, {89, 130}, {64, 81, 147}, {54, 82, 111, 215}, {47, 60, 174, 233}, {48, 65, 77, 135, 196}, {}, {15, 250}, {133, 149, 168}, {141, 156}, {109}, {92, 101, 133, 149}, {61, 239}, {163}, {69}, {}, {71}, {118, 131, 161, 233}, {}, {100, 106, 107, 121, 136, 155, 187, 191}, {67, 120}, {251, 255}, {40, 103, 218}, {52, 75, 129, 152, 213, 216}, {96}, {}, {140, 226}, {244}, {114, 151, 199, 243}, {184}, {65, 100, 121, 162}, {241}, {108, 141, 156, 166}, {125, 192, 246}, {46, 106, 107, 136, 155, 176, 237}, {125, 154, 190}, {}, {}, {78, 114, 199, 208, 240, 243}, {48, 77, 135}, {}, {123}, {55, 114, 224, 243}, {138}, {75, 152, 216}, {83, 246}, {228}, {86}, {186}, {248}, {}, {78, 172, 195, 240}, {140, 144}, {206, 248}, {219, 229}, {146}, {15, 52, 129, 180}, {12, 154}, {43, 54, 160}, {65, 75, 152, 162}, {}, {40, 148, 247}, {81, 159}, {45, 163, 242}, {}, {228}, {76, 153}, {55}, {96, 181}, {183, 210}, {62, 97, 115, 117}, {203}, {106, 107, 136, 155, 176, 191, 211}, {63, 80, 225}, {}, {15, 98}, {161, 174}, {142, 212}, {92, 101}, {112}, {46}, {137}, {61, 169}, {78, 195, 208}, {106, 107, 136, 155, 176, 191}, {45, 161, 174, 220, 233}, {114, 199, 251, 255}, {}, {51, 139, 154}, {144, 209}, {82, 111, 148}, {206}, {84}, {59, 164}, {88, 124, 127, 255}, {56, 83, 202}, {4, 17, 47, 60, 102}, {}, {170, 251}}
	//strgraph := "[[72 145] [] [] [] [17 102 127 152 253] [] [] [] [] [] [] [] [214] [] [] [89 134 164 213 232] [] [4 102 127 152 253] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [] [102 179 218] [] [] [215] [] [68 131 220 242] [62 75 191 237] [60 129 161 253] [77 135 162 196] [70 133] [72] [139 245] [129 180 213] [142 150] [135 160 215] [199 224] [57 149 252] [79 85 90] [105] [250] [47 129 161 253] [81 124 136 169 239] [117 128 227] [55 80 230] [147 159] [162 187 216] [68 143 150] [177] [66 143 150] [171] [49 133] [46 173] [0 145] [79] [103] [152 180 201 216] [45 153 223] [48 135 162 196] [91 93 195 208 240] [73] [55 63 230] [159 219] [50 111 119 160 247] [49 154 202 252] [249] [57 79 90] [67 115 204] [] [64 124 127 251] [158] [57 79 85] [15] [58 101 168 235] [122 134] [] [] [181 225] [26 115 227] [17 85 232] [] [121 176 187] [58 92 168 235] [4 17 127 152 253] [179] [106] [58] [107 136 155 176 191 229 241] [106 136 155 176 191 229 241] [189] [82 167] [148 153 157] [50 82 119 160 247] [236] [52 120] [94 185 195 199 243] [26 97 227] [138] [62 128 227] [131 146 174] [147] [101 177] [100 176 187] [93 134] [198] [64 88 127 251] [190 192] [84] [64 88 124 251] [] [52 180 213] [60 158] [118 146 174] [] [149 165 168] [93 122] [48 77 162 196] [106 107 155 176 191 229 241] [238] [90 200] [51 245] [183 209] [132 156 166 189] [234] [] [209 246] [] [212] [64 159] [218 247] [133 165 168] [66 68 143] [77 185] [75 180 201 216] [45 76 223] [192 214 245] [106 107 136 176 191 229 241] [132 141 166 189] [110 148 153] [60 130] [81 219] [54 135 215] [54 174 233 242] [65 187 216] [170 220] [250] [87] [132 141 156 189] [82 109] [133 149 165] [61 81 124 136 239] [255] [69] [208] [141] [54 161 233 242] [] [106 107 136 155 191 229 241] [101 120] [157] [103] [52 129 213] [96 225] [] [113 226] [186] [77 151] [205] [100 121 176] [] [108] [125 192] [106 107 136 155 176 229 241] [125 190] [130] [66 109 114] [78 91 93 208 240] [48 77 135 162] [] [123] [94 114 185 195 243] [] [65] [49 83 154 252] [228] [] [43] [210 248] [] [78 91 93 195 240] [144 246] [226] [229] [107 234] [52 129 180] [12] [54 135 160] [75 152 180 201] [97 105] [40 102 179] [211] [45 68 131 242] [] [] [45 76 153] [55 199] [230] [113 183] [62 117 128] [203 222] [211] [55 63 80] [155] [17 85 98] [54 161 174 242] [142] [] [112] [46 62 75 191] [] [61 81 124 136 169] [78 91 93 195 208] [188] [45 68 131 220] [94 114 185 195 199] [140 184] [51 139] [4 12 190 202] [148 218] [206 210] [111] [164] [0 178 243 255] [56 57 149] [4 17 102 127 152] [74] [0 178 243 251]]"
	//strinvgraph := "[[72 251 255] [] [] [] [17 102 246 253] [] [] [] [] [] [] [] [214 246] [] [] [91] [] [4 98 102 232 253] [] [] [] [] [] [] [] [] [97 115] [] [] [] [] [] [] [] [] [] [] [] [] [] [218] [] [] [205] [] [76 153 220 223 242] [71 237] [60] [77 135 196] [70 83 202] [82 111] [139 245] [113 129 180 213] [] [160 161 174 215 233] [63 80 224 230] [252] [56 85 90 252] [92 101 105] [] [47 130 158] [169 239] [46 117 227 237] [80 230] [88 124 127 147] [162 201] [68 150 194] [86] [45 66 150 220 242] [171] [49] [] [0 50] [79] [254] [46 152 216 237] [153 223] [48 135 151 185 196] [195 208 240] [57 73 85 90] [63 230] [61 159 169 239] [109 111 167] [202] [126] [57 90 98 232] [] [165] [124 127] [15] [57 85 138] [78 195 208 240] [101] [78 122 134 195 208 240] [114 199 243] [] [181] [115 217] [232] [] [121 187] [92 120 177] [4 17 40 218 253] [74 179] [] [58 217] [104 107 136 155 176 191] [106 136 155 176 191 212] [189] [167 194] [157] [82 249] [236] [183 226] [194 199 243] [86 97] [] [62 227] [131] [82 111] [113 177] [100 187] [93 134] [198] [61 88 127 169 239] [190 192] [] [4 17 88 102 124 253] [62 117 227] [47 52 60 180 213] [158 193] [45 118 220 242] [141 156 166] [49 70 149 168] [15 93 122] [48 54 77 160 196 215] [61 106 107 155 169 176 191 239] [] [116] [51 245] [244] [156 166 173] [53 234] [66 68 150] [209] [0 72] [118 131] [64 119] [110 157 247] [56 133 168 252] [53 66 68] [185] [4 17 75 102 216 253] [76 110 157 223] [83 202] [106 107 136 176 191 231] [141 166] [110 178] [89 130] [64 81 147] [54 82 111 215] [47 60 174 233] [48 65 77 135 196] [] [15 250] [133 149 168] [141 156] [109] [92 101 133 149] [61 239] [163] [69] [] [71] [118 131 161 233] [] [100 106 107 121 136 155 187 191] [67 120] [251 255] [40 103 218] [52 75 129 152 213 216] [96] [] [140 226] [244] [114 151 199 243] [184] [65 100 121 162] [241] [108 141 156 166] [125 192 246] [46 106 107 136 155 176 237] [125 154 190] [] [] [78 114 199 208 240 243] [48 77 135] [] [123] [55 114 224 243] [138] [75 152 216] [83 246] [228] [86] [186] [248] [] [78 172 195 240] [140 144] [206 248] [219 229] [146] [15 52 129 180] [12 154] [43 54 160] [65 75 152 162] [] [40 148 247] [81 159] [45 163 242] [] [228] [76 153] [55] [96 181] [183 210] [62 97 115 117] [203] [106 107 136 155 176 191 211] [63 80 225] [] [15 98] [161 174] [142 212] [92 101] [112] [46] [137] [61 169] [78 195 208] [106 107 136 155 176 191] [45 161 174 220 233] [114 199 251 255] [] [51 139 154] [144 209] [82 111 148] [206] [84] [59 164] [88 124 127 255] [56 83 202] [4 17 47 60 102] [] [170 251]]"

	// transfer(strgraph)
	// transfer(strinvgraph)

	start1 := time.Now()
	res1, _ := ReorderSort(graph, invgraph)
	e1 := time.Since(start1).Nanoseconds() / 1000
	fmt.Println("FabricMan:", res1)
	fmt.Println("time of FabricMan:", e1, "lenth of FabricMan:", len(res1))

	start2 := time.Now()
	resGen := NewResolver(&graph, &invgraph)
	res2, _ := resGen.GetSchedule()
	e2 := time.Since(start2).Nanoseconds() / 1000
	fmt.Println("Fabric++:", res2)
	fmt.Println("time of Fabric++:", e2, "lenth of Fabric++:", len(res2))
}

func transfer(str string) {
	newstr := strings.Replace(str, "[", "{", -1)
	newstr = strings.Replace(newstr, "]", "}", -1)
	newstr = strings.Replace(newstr, " ", ",", -1)
	fmt.Println("new:", newstr)
}

func ReorderSort(graph, invgraph [][]int32) ([]int32, error) {
	indegree := make(map[int32]int)
	outdegree := make(map[int32]int)
	nodeset := make(map[int32]bool)

	// Calculate in-degrees using invgraph
	for i := 0; i < len(invgraph); i++ {
		for node := range invgraph {
			indegree[int32(node)] = len(invgraph[int32(node)])
			nodeset[int32(node)] = true
		}
	}
	// Calculate out-degrees using graph
	for i := 0; i < len(graph); i++ {
		for node := range graph {
			outdegree[int32(node)] = len(graph[int32(node)])
		}
	}

	var result []int32
	var nodeToSort int32

	start := time.Now()
	for len(nodeset) > 0 {
		// Find the node with min in-dgree
		minIndegree := math.MaxInt32
		for node := range nodeset {
			if indegree[node] < minIndegree {
				minIndegree = indegree[node]
				nodeToSort = node
			} else if indegree[node] == minIndegree && outdegree[node] < outdegree[nodeToSort] {
				nodeToSort = node
			}
		}

		// remove nodes which affet nodeToSort
		for _, nodeToRemove := range invgraph[nodeToSort] {
			if exist := nodeset[nodeToRemove]; !exist {
				continue
			}
			delete(nodeset, nodeToRemove)
			for _, v := range invgraph[nodeToRemove] {
				outdegree[v]--
			}
			for _, v := range graph[nodeToRemove] {
				indegree[v]--
			}
		}
		result = append(result, nodeToSort)
		for _, v := range graph[nodeToSort] {
			indegree[v]--
		}
		delete(nodeset, nodeToSort)
	}
	e := time.Since(start).Nanoseconds() / 1000
	fmt.Println("Algorithm of FabricMan:", e)

	return result, nil
}

type Resolver interface {
	GetSchedule() ([]int32, []bool)
}

type resolver struct {
	graph    *[][]int32 // original graph represented as adjacency list
	invgraph *[][]int32 // inverted graph represented as adjacency list
}

func NewResolver(graph *[][]int32, invgraph *[][]int32) Resolver {
	return &resolver{
		graph:    graph,
		invgraph: invgraph,
	}
}

func (res *resolver) GetSchedule() ([]int32, []bool) {
	// get an instance of dependency resolver
	dagGenerator := NewJohnsonCE(res.graph)

	// run cycle breaker, and retrieve the number of invalidated vertices
	// and the invalid vertices set
	invCount, invSet := dagGenerator.Run()

	nvertices := int32(len(*(res.graph)))

	// track visited vertices
	visited := make([]bool, nvertices)

	// store the schedule
	schedule := make([]int32, 0, nvertices-invCount)

	// track number of processed vertices
	remainingVertices := nvertices - invCount

	// start vertex
	start := int32(0)

	for remainingVertices != 0 {
		addVertex := true
		if visited[start] || invSet[start] {
			start = (start + 1) % nvertices
			continue
		}

		// if there are no incoming edges, start traversal
		// otherwise traverse the inv graph to find the parent
		// which has no incoming edge.
		for _, in := range (*(res.invgraph))[start] {
			if !(visited[in] || invSet[in]) {
				start = in
				addVertex = false
				break
			}
		}
		if addVertex {
			visited[start] = true
			remainingVertices -= 1
			schedule = append(schedule, start)
			for _, n := range (*(res.graph))[start] {
				if !(visited[n] || invSet[n]) {
					start = n
					break
				}
			}
		}
	}

	return schedule, invSet
}
